package neon.release.project;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import neon.release.project.entity.Release;
import neon.release.project.entity.ReleaseStatus;
import neon.release.project.repository.ReleaseRepository;
import neon.release.project.repository.ReleaseStatusRepository;
import org.assertj.core.api.Assert;
import org.hamcrest.Matchers;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import java.util.Date;

import static org.hamcrest.Matchers.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@ExtendWith(SpringExtension.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK, classes = NeonReleaseApplication.class)
@AutoConfigureMockMvc
@TestPropertySource(locations = "classpath:application-test.properties")
@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.ANY)
public class IntegrationTests {
    ObjectMapper mapper = new ObjectMapper();
    @Autowired
    private MockMvc mvc;

    @Autowired
    private ReleaseRepository releaseRepository;

    @Autowired
    private ReleaseStatusRepository releaseStatusRepository;

    @BeforeEach
    void loadData() {
        TestUtil testUtil = new TestUtil(this.releaseRepository, this.releaseStatusRepository);
        testUtil.loadTestData();
    }

    @Test
    void fetchAllReleases() throws Exception {
        this.mvc.perform(get("/release").contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(2)))
                .andExpect(jsonPath("$[0].id", is(1)))
                .andExpect(jsonPath("$[0].name", is("First dev release")))
                .andExpect(jsonPath("$[0].status.statusName", is(TestUtil.possibleStatuses[1])))
                .andExpect(jsonPath("$[1].id", is(2)))
                .andExpect(jsonPath("$[1].status.statusName", is(TestUtil.possibleStatuses[TestUtil.possibleStatuses.length - 1])));
    }

    @Test
    void createNewRelease() throws Exception {
        Release newRelease = Release.builder()
                .releaseDate(new Date())
                .description("New release that has status ON DEV")
                .status(ReleaseStatus.builder().id(3L).statusName(TestUtil.possibleStatuses[2]).build())
                .name("Dev release")
                .build();

        MvcResult result = this.mvc.perform(post("/release")
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(newRelease)))
                .andExpect(status().isOk())
                // expecting 3 because it is autogenerated, and last id is 2
                .andExpect(jsonPath("$.id", is(3)))
                .andExpect(jsonPath("$.status.id", is(3)))
                .andExpect(jsonPath("$.status.statusName", is(TestUtil.possibleStatuses[2])))
                .andExpect(jsonPath("$.description", is(newRelease.getDescription())))
                .andExpect(jsonPath("$.name", is(newRelease.getName())))
                .andReturn();
        String bodyAsString = result.getResponse().getContentAsString();
        JsonNode jsonNode = mapper.readTree(bodyAsString);
        equalTo(jsonNode.get("createdAt").toString().equals(jsonNode.get("lastUpdateAt").toString()));

    }
}
